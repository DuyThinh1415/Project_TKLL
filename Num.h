// Generated by gencpp from file demo_pakage/Num.msg
// DO NOT EDIT!


#ifndef DEMO_PAKAGE_MESSAGE_NUM_H
#define DEMO_PAKAGE_MESSAGE_NUM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace demo_pakage
{
template <class ContainerAllocator>
struct Num_
{
  typedef Num_<ContainerAllocator> Type;

  Num_()
    : header(0)
    , base_arg(0)
    , int_1(0)
    , int_2(0)
    , int_3(0)
    , float_1(0.0)
    , float_2(0.0)
    , float_3(0.0)  {
    }
  Num_(const ContainerAllocator& _alloc)
    : header(0)
    , base_arg(0)
    , int_1(0)
    , int_2(0)
    , int_3(0)
    , float_1(0.0)
    , float_2(0.0)
    , float_3(0.0)  {
  (void)_alloc;
    }



   typedef int8_t _header_type;
  _header_type header;

   typedef int8_t _base_arg_type;
  _base_arg_type base_arg;

   typedef int8_t _int_1_type;
  _int_1_type int_1;

   typedef int8_t _int_2_type;
  _int_2_type int_2;

   typedef int8_t _int_3_type;
  _int_3_type int_3;

   typedef float _float_1_type;
  _float_1_type float_1;

   typedef float _float_2_type;
  _float_2_type float_2;

   typedef float _float_3_type;
  _float_3_type float_3;





  typedef boost::shared_ptr< ::demo_pakage::Num_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::demo_pakage::Num_<ContainerAllocator> const> ConstPtr;

}; // struct Num_

typedef ::demo_pakage::Num_<std::allocator<void> > Num;

typedef boost::shared_ptr< ::demo_pakage::Num > NumPtr;
typedef boost::shared_ptr< ::demo_pakage::Num const> NumConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::demo_pakage::Num_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::demo_pakage::Num_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::demo_pakage::Num_<ContainerAllocator1> & lhs, const ::demo_pakage::Num_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.base_arg == rhs.base_arg &&
    lhs.int_1 == rhs.int_1 &&
    lhs.int_2 == rhs.int_2 &&
    lhs.int_3 == rhs.int_3 &&
    lhs.float_1 == rhs.float_1 &&
    lhs.float_2 == rhs.float_2 &&
    lhs.float_3 == rhs.float_3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::demo_pakage::Num_<ContainerAllocator1> & lhs, const ::demo_pakage::Num_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace demo_pakage

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::demo_pakage::Num_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::demo_pakage::Num_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::demo_pakage::Num_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::demo_pakage::Num_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::demo_pakage::Num_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::demo_pakage::Num_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::demo_pakage::Num_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bdf47c37e328d974d88ee4941d6515ae";
  }

  static const char* value(const ::demo_pakage::Num_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbdf47c37e328d974ULL;
  static const uint64_t static_value2 = 0xd88ee4941d6515aeULL;
};

template<class ContainerAllocator>
struct DataType< ::demo_pakage::Num_<ContainerAllocator> >
{
  static const char* value()
  {
    return "demo_pakage/Num";
  }

  static const char* value(const ::demo_pakage::Num_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::demo_pakage::Num_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 header\n"
"int8 base_arg\n"
"int8 int_1\n"
"int8 int_2\n"
"int8 int_3\n"
"float32 float_1\n"
"float32 float_2\n"
"float32 float_3\n"
;
  }

  static const char* value(const ::demo_pakage::Num_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::demo_pakage::Num_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.base_arg);
      stream.next(m.int_1);
      stream.next(m.int_2);
      stream.next(m.int_3);
      stream.next(m.float_1);
      stream.next(m.float_2);
      stream.next(m.float_3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Num_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::demo_pakage::Num_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::demo_pakage::Num_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    Printer<int8_t>::stream(s, indent + "  ", v.header);
    s << indent << "base_arg: ";
    Printer<int8_t>::stream(s, indent + "  ", v.base_arg);
    s << indent << "int_1: ";
    Printer<int8_t>::stream(s, indent + "  ", v.int_1);
    s << indent << "int_2: ";
    Printer<int8_t>::stream(s, indent + "  ", v.int_2);
    s << indent << "int_3: ";
    Printer<int8_t>::stream(s, indent + "  ", v.int_3);
    s << indent << "float_1: ";
    Printer<float>::stream(s, indent + "  ", v.float_1);
    s << indent << "float_2: ";
    Printer<float>::stream(s, indent + "  ", v.float_2);
    s << indent << "float_3: ";
    Printer<float>::stream(s, indent + "  ", v.float_3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEMO_PAKAGE_MESSAGE_NUM_H
